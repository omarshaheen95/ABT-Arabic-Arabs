<?php

namespace App\Http\Requests;

use App\Models\User;
use App\Rules\UniqueMobilePhone;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Route;

class UserRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        if (Route::currentRouteName() == 'manager.user.edit' || Route::currentRouteName() == 'manager.user.update')
        {
            $id = $this->route('user');
            return [
                'name' => 'required',
                'email' => "required|email:rfc,dns|unique:users,email,$id,id,deleted_at,NULL",
                'password' => 'nullable|min:6',
                'image' => 'nullable|image',
                'school_id' => 'required|exists:schools,id',
                'teacher_id' => 'nullable|exists:teachers,id',
                'grade' => 'required',
                'alternate_grade' => 'nullable',
                'package_id' => 'required|exists:packages,id',
//                'type' => 'required|in:trial,member',
                'active_to' => 'required|date_format:Y-m-d',
                'year_learning' => 'required',
                'country_code' => 'required',
                'short_country' => 'required',
                'section' => 'nullable',
                "phone" => ['required'],
                'mobile' => ['required', 'phone:'.request()->get('short_country')],
            ];
        }else{
            return [
                'name' => 'required',
                'email' => 'required|email:rfc,dns|unique:users,email,{$id},id,deleted_at,NULL',
                'password' => 'required|min:6',
                'image' => 'nullable|image',
                'school_id' => 'required|exists:schools,id',
                'teacher_id' => 'nullable|exists:teachers,id',
                'grade' => 'required',
                'alternate_grade' => 'nullable',
                'package_id' => 'required|exists:packages,id',
//                'type' => 'required|in:trial,member',
                'active_to' => 'required|date_format:Y-m-d',
                'year_learning' => 'required',
                'country_code' => 'required',
                'short_country' => 'required',
                'section' => 'nullable',
                "phone" => ['required'],
                'mobile' => ['required', 'phone:'.request()->get('short_country')],
            ];
        }



    }

    public function messages()
    {
        return [
            'name.required' => t('Name required'),
            'email.required' => t('Email required'),
            'email.email' => t('Email is wrong'),
            'email.unique' => t('Email is already exists'),
            'password.required' => t('Password required'),
            'password.min' => t('Password must be 6 chart at least'),
            'phone.required' => t('Mobile required'),
            'mobile.required' => t('Mobile required'),
            'mobile.phone' => t('Mobile invalid'),
            'country_code.required' => t('country code required'),
            'short_country.required' => t('short country required'),
            'image.image' => t('Image invalid'),
            'year_learning.required' => t('Years learning required'),
            'year_learning.integer' => t('Years learning must be number'),
            'active_to.required' => t('Active to required'),
            'school_id.required' => t('School required'),
            'school_id.exists' => t('School invalid'),
            'grade.required' => t('Grade required'),
            'package_id.required' => t('Package required'),
            'package_id.exists' => t('Package invalid'),
        ]; // TODO: Change the autogenerated stub
    }
}
